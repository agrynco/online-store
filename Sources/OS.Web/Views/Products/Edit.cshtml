@using OS.Web.Models.ProductViewModels
@model ProductCreateOrEditViewModel

@{
    Layout = "~/Views/Shared/_adminEditLayout.cshtml";
}

@section editor
{
    <div class="row">
        <div class="col-md-12">
            <section id="category-editor">
                <h4>
                    @if (Model.Id.HasValue)
                    {
                        <text>
                            Редагування
                        </text>
                    }
                    else
                    {
                        <text>
                            Створення
                        </text>
                    }
                </h4>
                <hr />
                @Html.ValidationSummary(true, "", new { @class = "text-danger" })

                <div class="form-group">
                    @Html.LabelFor(m => m.CategorySelectorViewModel.Name, new { @class = "col-md-2 control-label" })
                    <div class="col-md-10">
                        @Html.HiddenFor(m => m.CategorySelectorViewModel.Id, new { @class = "form-control" })
                        <div>
                            <span id="pathToRoot">
                                @if (Model.CategorySelectorViewModel.ParentCategories != null)
                                {
                                    <text>
                                        @string.Join(" : ", Model.CategorySelectorViewModel.ParentCategories)
                                    </text>
                                }
                            </span>
                        </div>
                        <div>
                            @Html.TextBoxFor(m => m.CategorySelectorViewModel.Name, new { @class = "form-control" })
                            @Html.ValidationMessageFor(m => m.CategorySelectorViewModel.Name, "", new { @class = "text-danger" })
                        </div>
                    </div>
                </div>
                <div class="form-group">
                    @Html.LabelFor(m => m.Name, new { @class = "col-md-2 control-label" })
                    <div class="col-md-10">
                        @Html.TextBoxFor(m => m.Name, new { @class = "form-control" })
                        @Html.ValidationMessageFor(m => m.Name, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="form-group">
                    @Html.LabelFor(m => m.ShortDescription, new { @class = "col-md-2 control-label" })
                    <div class="col-md-10">
                        @Html.TextBoxFor(m => m.ShortDescription, new { @class = "form-control" })
                        @Html.ValidationMessageFor(m => m.ShortDescription, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="form-group">
                    @Html.LabelFor(m => m.Description, new { @class = "col-md-2 control-label" })
                    <div class="col-md-10">
                        @Html.TextAreaFor(m => m.Description, new
                   {
                       @class = "form-control",
                       rows = 15
                   })
                        @Html.ValidationMessageFor(m => m.Description, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="form-group">
                    @Html.LabelFor(m => m.BrandName, new { @class = "col-md-2 control-label" })
                    <div class="col-md-10">
                        @Html.TextBoxFor(m => m.BrandName, new { @class = "form-control" })
                        @Html.ValidationMessageFor(m => m.BrandName, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="form-group">
                    @Html.LabelFor(m => m.CountryName, new { @class = "col-md-2 control-label" })
                    <div class="col-md-10">
                        @Html.TextBoxFor(m => m.CountryName, new { @class = "form-control" })
                        @Html.ValidationMessageFor(m => m.CountryName, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="form-group">
                    @Html.LabelFor(m => m.Price, new { @class = "col-md-2 control-label" })
                    <div class="col-md-10">
                        @Html.TextBoxFor(m => m.Price, new { @class = "form-control" })
                        @Html.ValidationMessageFor(m => m.Price, "", new { @class = "text-danger" })
                    </div>
                </div>
                @Html.Partial("_alreadyLoadedPhotos", Model)
                @Html.Partial("_addFiles", Model)
                <div id="dialog-buttons-placeholder">
                </div>
            </section>
        </div>
    </div>
}

@section scripts
{
    <script src="~/Scripts/tinymce/js/tinymce/tinymce.min.js"></script>

    <script type="text/javascript">
        tinyMCE.init(
        {
            selector: "#@Html.IdFor(m => m.Description)",
            entity_encoding: "raw"
        });

        $("#@Html.IdFor(m => m.BrandName)").autocomplete(
        {
            source: "/api/brands/autocomplete",
            minLength: 1,
            create: function ()
            {
                $(this).data('ui-autocomplete')._renderItem = function (ul, item)
                {
                    return $('<li>')
                        .append('<a>' + item.label.replace(this.term, "<b>" + this.term + "</b>") + '</a>')
                        .appendTo(ul);
                };
            }
        });

        $("#@Html.IdFor(m => m.CountryName)").autocomplete(
        {
            source: "/api/countries/autocomplete",
            minLength: 1,
            create: function ()
            {
                $(this).data('ui-autocomplete')._renderItem = function (ul, item)
                {
                    return $('<li>')
                        .append('<a>' + item.label.replace(this.term, "<b>" + this.term + "</b>") + '</a>')
                        .appendTo(ul);
                };
            }
        });

        var enterTheCategoryCallBack = function (categoryId)
        {
            $("#@Html.IdFor(x => x.CategorySelectorViewModel.Id)").val(categoryId);
        }
    </script>

    <script type="text/javascript">
        var $tbxPrentCategoryName = $("#@Html.IdFor(m => m.CategorySelectorViewModel.Name)");
        var $pathToRoot = $("#pathToRoot");
        var $categoryId = $("#@Html.IdFor(x => x.CategorySelectorViewModel.Id)");

        $tbxPrentCategoryName.autocomplete(
        {
            source: "/api/categories/autocomplete",
            minLength: 1,
            create: function ()
            {
                $(this).data('ui-autocomplete')._renderItem = function (ul, item)
                {
                    var separator = " : ";

                    var fullPath = item.Name;

                    item.PathToRoot = "";
                    if (item.ParentCategories.length > 0)
                    {
                        item.PathToRoot = item.ParentCategories.join(separator);

                        fullPath = item.PathToRoot + separator + fullPath;
                    }

                    return $('<li>')
                        .append('<a>' + fullPath.replace(this.term, "<b>" + this.term + "</b>") + '</a>')
                        .appendTo(ul);
                };
            },
            select: function (event, ui)
            {
                $categoryId.val(ui.item.Id);
                $tbxPrentCategoryName.val(ui.item.Name);
                $pathToRoot.text(ui.item.PathToRoot);

                return false;
            }
        });

        $tbxPrentCategoryName.change(function()
        {
            $pathToRoot.text("");
            $categoryId.val("");
        });
    </script>
}
